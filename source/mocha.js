"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runMocha = runMocha;var _mocha = _interopRequireDefault(require("mocha"));
var _javascriptTranspilation = require("@deployment/javascriptTranspilation");
var _script = require("./script.js");


function runMocha({
  mocha,
  testTarget,
  jsFileArray,
  shouldInvalidateRequireModule = false,
  shouldCompileTest = true,
  shouldDebugger,
  targetProject,
  mochaOption = {},
  additionalParameter } =
{}) {

  mochaOption = Object.assign(
  {
    ui: 'tdd',
    reporter: 'progress' || 'min',
    timeout: 10000,
    fullTrace: true },



  mochaOption);


  if (shouldDebugger) mochaOption.timeout = Infinity;
  mocha || (mocha = new _mocha.default(mochaOption));

  if (shouldInvalidateRequireModule) {
    const { invalidateRequiredModule, invalidateRequiredModuleEventHandler } = '../utility/invalidateRequiredModule.js';
    invalidateRequiredModuleEventHandler({ mochaInstance: mocha });
    invalidateRequiredModule({ fileArray: jsFileArray });
  }

  if (shouldCompileTest) {
    let compiler = new _javascriptTranspilation.Compiler({ babelConfig: targetProject.configuration.getTranspilation() });
    compiler.requireHook({ restrictToTargetProject: false });





  }


  if (Array.isArray(testTarget)) {

    testTarget.forEach(file => {
      mocha.addFile(file);
    });
  } else {

    mocha.addFile(testPath);
  }


  if (additionalParameter)
  global.additionalParameter = JSON.stringify(additionalParameter);



  try {
    if (shouldDebugger) {
      (0, _script.subprocessInspector)();

    }
    mocha.run(error => {

      if (error) {


      }

    });


















  } catch (error) {
    console.group(`âš  Error while running Mocha test:`);
    console.log(error);
    console.groupEnd();
    console.log('\n');

  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,