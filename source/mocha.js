"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runMocha = runMocha;var _mocha = _interopRequireDefault(require("mocha"));
var _javascriptTranspilation = require("@dependency/javascriptTranspilation");
var _script = require("./script.js");

function runMocha({
  mocha,
  testTarget,
  jsFileArray,
  shouldInvalidateRequireModule = false,
  shouldCompileTest = true,
  shouldDebugger,
  targetProject } =
{}) {

  let mochaOption = {
    ui: 'tdd',
    reporter: 'progress' || 'min' };


  if (shouldDebugger) mochaOption.timeout = Infinity;
  mocha || (mocha = new _mocha.default(mochaOption));

  if (shouldInvalidateRequireModule) {
    const { invalidateRequiredModule, invalidateRequiredModuleEventHandler } = '../utility/invalidateRequiredModule.js';
    invalidateRequiredModuleEventHandler({ mochaInstance: mocha });
    invalidateRequiredModule({ fileArray: jsFileArray });
  }

  if (shouldCompileTest) {
    let compiler = new _javascriptTranspilation.Compiler({ babelTransformConfig: targetProject.configuration.configuration.transpilation.babelConfig });
    compiler.requireHook({ restrictToTargetProject: false });





  }


  if (Array.isArray(testTarget)) {

    testTarget.forEach(file => {
      mocha.addFile(file);
    });
  } else {

    mocha.addFile(testPath);
  }


  try {
    if (shouldDebugger) {
      (0, _script.subprocessInspector)();

    }
    mocha.run(error => {

      if (error) {


      }

    });


















  } catch (error) {
    console.group(`âš  Error while running Mocha test:`);
    console.log(error);
    console.groupEnd();
    console.log('\n');

  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9tb2NoYS5qcyJdLCJuYW1lcyI6WyJydW5Nb2NoYSIsIm1vY2hhIiwidGVzdFRhcmdldCIsImpzRmlsZUFycmF5Iiwic2hvdWxkSW52YWxpZGF0ZVJlcXVpcmVNb2R1bGUiLCJzaG91bGRDb21waWxlVGVzdCIsInNob3VsZERlYnVnZ2VyIiwidGFyZ2V0UHJvamVjdCIsIm1vY2hhT3B0aW9uIiwidWkiLCJyZXBvcnRlciIsInRpbWVvdXQiLCJJbmZpbml0eSIsIk1vY2hhIiwiaW52YWxpZGF0ZVJlcXVpcmVkTW9kdWxlIiwiaW52YWxpZGF0ZVJlcXVpcmVkTW9kdWxlRXZlbnRIYW5kbGVyIiwibW9jaGFJbnN0YW5jZSIsImZpbGVBcnJheSIsImNvbXBpbGVyIiwiQ29tcGlsZXIiLCJiYWJlbFRyYW5zZm9ybUNvbmZpZyIsImNvbmZpZ3VyYXRpb24iLCJ0cmFuc3BpbGF0aW9uIiwiYmFiZWxDb25maWciLCJyZXF1aXJlSG9vayIsInJlc3RyaWN0VG9UYXJnZXRQcm9qZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsImZpbGUiLCJhZGRGaWxlIiwidGVzdFBhdGgiLCJydW4iLCJlcnJvciIsImNvbnNvbGUiLCJncm91cCIsImxvZyIsImdyb3VwRW5kIl0sIm1hcHBpbmdzIjoiNExBQUE7QUFDQTtBQUNBOztBQUVPLFNBQVNBLFFBQVQsQ0FBa0I7QUFDdkJDLEVBQUFBLEtBRHVCO0FBRXZCQyxFQUFBQSxVQUZ1QjtBQUd2QkMsRUFBQUEsV0FIdUI7QUFJdkJDLEVBQUFBLDZCQUE2QixHQUFHLEtBSlQ7QUFLdkJDLEVBQUFBLGlCQUFpQixHQUFHLElBTEc7QUFNdkJDLEVBQUFBLGNBTnVCO0FBT3ZCQyxFQUFBQSxhQVB1QjtBQVFyQixFQVJHLEVBUUM7O0FBRU4sTUFBSUMsV0FBVyxHQUFHO0FBQ2hCQyxJQUFBQSxFQUFFLEVBQUUsS0FEWTtBQUVoQkMsSUFBQUEsUUFBUSxFQUFFLGNBQWMsS0FGUixFQUFsQjs7O0FBS0EsTUFBSUosY0FBSixFQUFvQkUsV0FBVyxDQUFDRyxPQUFaLEdBQXNCQyxRQUF0QjtBQUNwQlgsRUFBQUEsS0FBSyxLQUFMQSxLQUFLLEdBQUssSUFBSVksY0FBSixDQUFVTCxXQUFWLENBQUwsQ0FBTDs7QUFFQSxNQUFJSiw2QkFBSixFQUFtQztBQUNqQyxVQUFNLEVBQUVVLHdCQUFGLEVBQTRCQyxvQ0FBNUIsS0FBcUUsd0NBQTNFO0FBQ0FBLElBQUFBLG9DQUFvQyxDQUFDLEVBQUVDLGFBQWEsRUFBRWYsS0FBakIsRUFBRCxDQUFwQztBQUNBYSxJQUFBQSx3QkFBd0IsQ0FBQyxFQUFFRyxTQUFTLEVBQUVkLFdBQWIsRUFBRCxDQUF4QjtBQUNEOztBQUVELE1BQUlFLGlCQUFKLEVBQXVCO0FBQ3JCLFFBQUlhLFFBQVEsR0FBRyxJQUFJQyxpQ0FBSixDQUFhLEVBQUVDLG9CQUFvQixFQUFFYixhQUFhLENBQUNjLGFBQWQsQ0FBNEJBLGFBQTVCLENBQTBDQyxhQUExQyxDQUF3REMsV0FBaEYsRUFBYixDQUFmO0FBQ0FMLElBQUFBLFFBQVEsQ0FBQ00sV0FBVCxDQUFxQixFQUFFQyx1QkFBdUIsRUFBRSxLQUEzQixFQUFyQjs7Ozs7O0FBTUQ7OztBQUdELE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjekIsVUFBZCxDQUFKLEVBQStCOztBQUU3QkEsSUFBQUEsVUFBVSxDQUFDMEIsT0FBWCxDQUFtQkMsSUFBSSxJQUFJO0FBQ3pCNUIsTUFBQUEsS0FBSyxDQUFDNkIsT0FBTixDQUFjRCxJQUFkO0FBQ0QsS0FGRDtBQUdELEdBTEQsTUFLTzs7QUFFTDVCLElBQUFBLEtBQUssQ0FBQzZCLE9BQU4sQ0FBY0MsUUFBZDtBQUNEOzs7QUFHRCxNQUFJO0FBQ0YsUUFBSXpCLGNBQUosRUFBb0I7QUFDbEI7O0FBRUQ7QUFDREwsSUFBQUEsS0FBSyxDQUFDK0IsR0FBTixDQUFVQyxLQUFLLElBQUk7O0FBRWpCLFVBQUlBLEtBQUosRUFBVzs7O0FBR1Y7O0FBRUYsS0FQRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCRCxHQS9CRCxDQStCRSxPQUFPQSxLQUFQLEVBQWM7QUFDZEMsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWUsbUNBQWY7QUFDQUQsSUFBQUEsT0FBTyxDQUFDRSxHQUFSLENBQVlILEtBQVo7QUFDQUMsSUFBQUEsT0FBTyxDQUFDRyxRQUFSO0FBQ0FILElBQUFBLE9BQU8sQ0FBQ0UsR0FBUixDQUFZLElBQVo7O0FBRUQ7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNb2NoYSBmcm9tICdtb2NoYScgLy8gTW9jaGEgLVByb2dyYW1tYXRpYyByZXN0IHJ1bm5lciBodHRwczovL2dpdGh1Yi5jb20vbW9jaGFqcy9tb2NoYS93aWtpL1VzaW5nLW1vY2hhLXByb2dyYW1tYXRpY2FsbHlcbmltcG9ydCB7IENvbXBpbGVyIH0gZnJvbSAnQGRlcGVuZGVuY3kvamF2YXNjcmlwdFRyYW5zcGlsYXRpb24nXG5pbXBvcnQgeyBzdWJwcm9jZXNzSW5zcGVjdG9yIH0gZnJvbSAnLi9zY3JpcHQuanMnXG5cbmV4cG9ydCBmdW5jdGlvbiBydW5Nb2NoYSh7XG4gIG1vY2hhLCAvLyBJbnN0YW50aWF0ZSBhIE1vY2hhIGluc3RhbmNlLlxuICB0ZXN0VGFyZ2V0LFxuICBqc0ZpbGVBcnJheSxcbiAgc2hvdWxkSW52YWxpZGF0ZVJlcXVpcmVNb2R1bGUgPSBmYWxzZSwgLy8gaW52YWxpZGF0aW9uIGlzbid0IG5lZWRlZCBhbnltb3JlIGFzIHRoaXMgbW9kdWxlIGlzIHJ1biBpbiBhIHN1YnByb2Nlc3NcbiAgc2hvdWxkQ29tcGlsZVRlc3QgPSB0cnVlLFxuICBzaG91bGREZWJ1Z2dlcixcbiAgdGFyZ2V0UHJvamVjdCxcbn0gPSB7fSkge1xuICAvLyBwcm9ncmFtbWF0aWMgYXBpIG9mIG1vY2hhIC0gaHR0cHM6Ly9naXRodWIuY29tL21vY2hhanMvbW9jaGEvd2lraS9Vc2luZy1Nb2NoYS1wcm9ncmFtbWF0aWNhbGx5XG4gIGxldCBtb2NoYU9wdGlvbiA9IHtcbiAgICB1aTogJ3RkZCcsIC8vIE5vdGU6IG5vdCB1c2luZyBodHRwczovL21vY2hhanMub3JnLyNyZXF1aXJlIGludGVyZmFjZSBiZWNhdXNlIGl0IGRvZXNuJ3Qgd29yayB3aXRoIG5vZGUgY2xpLCBpdCByZXF1aXJlcyBydW5uaW5nIHRlc3RzIHRocm91Z2ggYG1vY2hhYCBjbGkgYXMgbWVudGlvbmVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2NoYWpzL21vY2hhL2lzc3Vlcy8xMTYwXG4gICAgcmVwb3J0ZXI6ICdwcm9ncmVzcycgfHwgJ21pbicgLyptaW4gcmVtb3ZlcyBhbnkgY29uc29sZS5sb2cgb3V0cHV0IG91dHNpZGUgb2YgdGVzdC9pdCBibG9ja3MqLywgLy8gaHR0cHM6Ly9tb2NoYWpzLm9yZy8jbGlzdFxuICB9XG4gIC8vIHByZXZlbnQgdGVzdCB0aW1lb3V0IGVycm9yIHRyaWdnZXJpbmcgd2hlbiBpbiBkZWJ1ZyBtb2RlIChhcyBwYXVzaW5nIHNjcmlwdCBjb3VudHMgaW4gdGhlIHRpbWVvdXQpLlxuICBpZiAoc2hvdWxkRGVidWdnZXIpIG1vY2hhT3B0aW9uLnRpbWVvdXQgPSBJbmZpbml0eSAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9jaGFqcy9tb2NoYS9ibG9iLzE4NmNhMzY1N2I0ZDNlMGMwYTYwMmE1MDA2NTNhNjk1ZjRlMDg5MzAvbGliL3J1bm5hYmxlLmpzI0wzNlxuICBtb2NoYSB8fD0gbmV3IE1vY2hhKG1vY2hhT3B0aW9uKVxuXG4gIGlmIChzaG91bGRJbnZhbGlkYXRlUmVxdWlyZU1vZHVsZSkge1xuICAgIGNvbnN0IHsgaW52YWxpZGF0ZVJlcXVpcmVkTW9kdWxlLCBpbnZhbGlkYXRlUmVxdWlyZWRNb2R1bGVFdmVudEhhbmRsZXIgfSA9ICcuLi91dGlsaXR5L2ludmFsaWRhdGVSZXF1aXJlZE1vZHVsZS5qcydcbiAgICBpbnZhbGlkYXRlUmVxdWlyZWRNb2R1bGVFdmVudEhhbmRsZXIoeyBtb2NoYUluc3RhbmNlOiBtb2NoYSB9KVxuICAgIGludmFsaWRhdGVSZXF1aXJlZE1vZHVsZSh7IGZpbGVBcnJheToganNGaWxlQXJyYXkgfSlcbiAgfVxuXG4gIGlmIChzaG91bGRDb21waWxlVGVzdCkge1xuICAgIGxldCBjb21waWxlciA9IG5ldyBDb21waWxlcih7IGJhYmVsVHJhbnNmb3JtQ29uZmlnOiB0YXJnZXRQcm9qZWN0LmNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbi50cmFuc3BpbGF0aW9uLmJhYmVsQ29uZmlnIC8qKiBTZWFyY2ggZm9yIGNvbmZpZ3VyYXRpb24gZmlsZXMgZnJvbSB0YXJnZXQgcHJvamVjdCAqLyB9KVxuICAgIGNvbXBpbGVyLnJlcXVpcmVIb29rKHsgcmVzdHJpY3RUb1RhcmdldFByb2plY3Q6IGZhbHNlIC8qIFRyYW5zcGlsZSB0ZXN0cyBvZiB0aGUgdGFyZ2V0IHByb2plY3QgKi8gfSlcbiAgICAvLyBwcm9jZXNzLm9uKCdleGl0JywgKCkgPT4ge1xuICAgIC8vICAgY29uc29sZS5sb2coJ1Rlc3RSdW5uZXIgQ0xJJylcbiAgICAvLyAgIGNvbnNvbGUubG9nKGNvbXBpbGVyLmxvYWRlZEZpbGVzLm1hcCh2YWx1ZSA9PiB2YWx1ZS5maWxlbmFtZSkpXG4gICAgLy8gICBjb25zb2xlLmxvZyhjb21waWxlci5iYWJlbFJlZ2lzdGVyQ29uZmlnLmlnbm9yZSlcbiAgICAvLyB9KVxuICB9XG5cbiAgLy8gQWRkIGVhY2ggLnRlc3QuanMgZmlsZSB0byB0aGUgbW9jaGEgaW5zdGFuY2VcbiAgaWYgKEFycmF5LmlzQXJyYXkodGVzdFRhcmdldCkpIHtcbiAgICAvLyB0cmVhdCB0ZXN0IHRhcmdldCBhcyBhcnJheSBvZiBmaWxlcy5cbiAgICB0ZXN0VGFyZ2V0LmZvckVhY2goZmlsZSA9PiB7XG4gICAgICBtb2NoYS5hZGRGaWxlKGZpbGUpXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBzaW5nbGUgdGVzdCBmaWxlIHBhdGhcbiAgICBtb2NoYS5hZGRGaWxlKHRlc3RQYXRoKVxuICB9XG5cbiAgLy8gUnVuIHRlc3RzLlxuICB0cnkge1xuICAgIGlmIChzaG91bGREZWJ1Z2dlcikge1xuICAgICAgc3VicHJvY2Vzc0luc3BlY3RvcigpXG4gICAgICAvLyBkZWJ1Z2dlciAvLyBXaGVuIHVzaW5nIHJ1bnRpbWUgaW5zcGVjdG9yIEFQSSwgdGhlIGJyZWFrcG9pbnRzIGluIFZTQ29kZSB3b24ndCBiZSByZWNvZ25pemVkIHdpdGhvdXQgYnJlYWtpbmcgKFVwZGF0ZWQgLSB0aGlzIGlzIG5vIGxvbmdlciB0cnVlLCBhcyBWU0NvZGUgbGF0ZXN0IHJlbGVhc2Ugc2VlbXMgdG8gZml4IHRoaXMgaXNzdWUpLlxuICAgIH1cbiAgICBtb2NoYS5ydW4oZXJyb3IgPT4ge1xuICAgICAgLy8gZXhpdCB3aXRoIG5vbi16ZXJvIHN0YXR1cyBpZiB0aGVyZSB3ZXJlIGZhaWx1cmVzXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgLy8gbW9jaGEgaGFuZGxlcyBwcmludGluZyBlcnJvciBtZXNzYWdlLlxuICAgICAgICAvLyB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgICAgLy8gcHJvY2Vzcy5leGl0KClcbiAgICB9KVxuICAgIC8vIC5vbigndGVzdCcsIGZ1bmN0aW9uKHRlc3QpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ1Rlc3Qgc3RhcnRlZDogJyt0ZXN0LnRpdGxlKTtcbiAgICAvLyB9KVxuICAgIC8vIC5vbigndGVzdCBlbmQnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdUZXN0IGRvbmU6ICcrdGVzdC50aXRsZSk7XG4gICAgLy8gfSlcbiAgICAvLyAub24oJ3Bhc3MnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdUZXN0IHBhc3NlZCcpO1xuICAgIC8vICAgICBjb25zb2xlLmxvZyh0ZXN0KTtcbiAgICAvLyB9KVxuICAgIC8vIC5vbignZmFpbCcsIGZ1bmN0aW9uKHRlc3QsIGVycikge1xuICAgIC8vICAgICBjb25zb2xlLmxvZygnVGVzdCBmYWlsJyk7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHRlc3QpO1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIC8vIH0pXG4gICAgLy8gLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ0FsbCBkb25lJyk7XG4gICAgLy8gfSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmdyb3VwKGDimqAgRXJyb3Igd2hpbGUgcnVubmluZyBNb2NoYSB0ZXN0OmApXG4gICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgY29uc29sZS5ncm91cEVuZCgpXG4gICAgY29uc29sZS5sb2coJ1xcbicpXG4gICAgLy8gdGhyb3cgZXJyb3JcbiAgfVxufVxuIl19