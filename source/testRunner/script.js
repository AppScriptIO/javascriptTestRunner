"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runTest = runTest;exports.subprocessInspector = subprocessInspector;var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _listFileRecursively = require("../utility/listFileRecursively.js");

var _nodejsLiveReload = require("@dependency/nodejsLiveReload");

var _child_process = _interopRequireDefault(require("child_process"));const mochaModule = _path.default.join(__dirname, '../../entrypoint/cli/index.js');

async function runTest({
  targetProject,
  testPath = [],
  jsPath = [],
  jsFileExtension = ['.js', '.ts'],
  testFileExtension = ['.test.js'],
  ignoreRegex = [],
  shouldCompileTest,
  shouldDebugger = false } =
{}) {
  process.on('SIGINT', () => {
    console.log('Caught interrupt signal - test container level');
    process.exit(0);
  });
  console.log(`\x1b[33m\x1b[1m\x1b[7m\x1b[36m%s\x1b[0m \x1b[2m\x1b[3m%s\x1b[0m`, `Container:`, `NodeJS App`);

  await require('@dependency/addModuleResolutionPath').addModuleResolutionPath({ pathArray: [_path.default.dirname(require.main.filename)] });

  (0, _assert.default)(targetProject, `targetProject must be passed.`);
  let targetProjectRootPath = targetProject.configuration.rootPath;


  if (ignoreRegex.length != 0) {
    ignoreRegex.push(new RegExp(`${_path.default.join(targetProjectRootPath, 'temporary')}`));
    ignoreRegex.push(new RegExp(`${_path.default.join(targetProjectRootPath, 'distribution')}`));
  }


  console.log(`• Searching for ${JSON.stringify(testFileExtension)} extension files, in path ${JSON.stringify(testPath)}.`);
  let testFileArray = [];
  testPath.forEach(p => {
    p = !_path.default.isAbsolute(p) ? _path.default.join(targetProjectRootPath, p) : p;
    console.log(`• Test path: ${p}`);
    if (testFileExtension.some(extension => p.endsWith(extension))) {

      testFileArray.push(p);
    } else {

      let fileList = (0, _listFileRecursively.listFileWithExtension)({ directory: p, extension: testFileExtension });
      testFileArray = Array.prototype.concat.apply(testFileArray, fileList);
    }
  });



  jsPath.push(targetProjectRootPath);
  let jsFileArray = jsPath.map(pathArray => (0, _listFileRecursively.listFileWithExtension)({ directory: pathArray, extension: jsFileExtension, ignoreRegex }));
  let jsFileArrayOfArray = Array.prototype.concat.apply(jsFileArray, testFileArray);

  let subprocess;
  function runMochaInSubprocess() {
    let stringifyArgs = JSON.stringify([{ testTarget: testFileArray, jsFileArray: jsFileArrayOfArray, shouldCompileTest, shouldDebugger, targetProject }]);

    subprocess = _child_process.default.fork(mochaModule, [stringifyArgs], { stdio: [0, 1, 2, 'ipc'] });

  }

  await (0, _nodejsLiveReload.watchFile)({

    triggerCallback: () => {
      subprocess && subprocess.kill('SIGINT');
      runMochaInSubprocess();
    },
    fileArray: Array.prototype.concat.apply([testFileArray], jsFileArrayOfArray),
    ignoreNodeModules: true,
    logMessage: false });


  runMochaInSubprocess();
}









function subprocessInspector({ port = 9229, host = 'localhost', shouldbreak = true } = {}) {
  const inspector = require('inspector');
  inspector.open(port, host, shouldbreak);

  process.on('beforeExit', () => {
    setTimeout(() => {}, 1000000000);
  });
  return inspector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,