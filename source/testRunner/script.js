"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runTest = runTest;exports.subprocessInspector = subprocessInspector;var _path = _interopRequireDefault(require("path"));


var _child_process = _interopRequireDefault(require("child_process"));const mochaModule = _path.default.join(__dirname, '../../entrypoint/cli/index.js');



async function runTest({
  targetProject = function (e) {throw e;}(new Error('targetProject must be passed.')),
  shouldCompileTest,
  shouldDebugger = false,
  testFileArray,
  jsFileArray,
  watchFile = false } =
{}) {
  console.log(`\x1b[33m\x1b[1m\x1b[7m\x1b[36m%s\x1b[0m \x1b[2m\x1b[3m%s\x1b[0m`, `Container:`, `NodeJS App`);

  await require('@dependency/addModuleResolutionPath').addModuleResolutionPath({ pathArray: [_path.default.dirname(require.main.filename)] });

  let subprocess;

  process.on('SIGINT', () => {
    subprocess && subprocess.kill('SIGINT');
    console.log('Caught interrupt signal') && process.exit(0);
  });
  function runMochaInSubprocess() {
    let stringifyArgs = JSON.stringify([{ testTarget: testFileArray, jsFileArray, shouldCompileTest, shouldDebugger, targetProject }]);

    subprocess = _child_process.default.fork(mochaModule, [stringifyArgs], {
      stdio: [0, 1, 2, 'ipc'],
      execArgv: [

      '--no-lazy'] });


    subprocess.on('exit', () => console.log(`Test subprocess ${subprocess.pid} exited.`));
  }

  runMochaInSubprocess();


  function restartMochaSubprocess() {
    console.log('â€¢ Triggered mocha test restart [javascriptTestRunner]');
    subprocess && subprocess.kill('SIGINT') && runMochaInSubprocess();
  }

  if (watchFile)
  await watchFile({

    triggerCallback: restartMochaSubprocess,

    fileArray: jsFileArray,
    ignoreNodeModules: true,
    logMessage: true });



  return { restart: restartMochaSubprocess };
}









function subprocessInspector({ port = 9229, host = 'localhost', shouldbreak = true } = {}) {
  const inspector = require('inspector');
  inspector.open(port, host, shouldbreak);

  process.on('beforeExit', () => {
    setTimeout(() => {}, 1000000000);
  });
  return inspector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,