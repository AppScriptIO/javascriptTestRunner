"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.runTest = runTest;exports.subprocessInspector = subprocessInspector;var _path = _interopRequireDefault(require("path"));
var _assert = _interopRequireDefault(require("assert"));
var _listFileRecursively = require("./utility/listFileRecursively.js");

var _nodejsLiveReload = require("@dependency/nodejsLiveReload");
var _fs = require("fs");
var _child_process = _interopRequireDefault(require("child_process"));const mochaModule = _path.default.join(__dirname, '../../entrypoint/cli/index.js');

async function runTest({
  targetProject,
  testPath,
  jsFileExtension = ['.js', '.ts'],
  testFileExtension = ['.test.js'],
  shouldCompileTest,
  shouldDebugger = false } =
{}) {
  console.log(`\x1b[33m\x1b[1m\x1b[7m\x1b[36m%s\x1b[0m \x1b[2m\x1b[3m%s\x1b[0m`, `Container:`, `NodeJS App`);


  await require('@dependency/addModuleResolutionPath').addModuleResolutionPath({ pathArray: [_path.default.dirname(require.main.filename)] });

  process.on('SIGINT', () => {
    console.log('Caught interrupt signal - test container level');
    process.exit(0);
  });

  (0, _assert.default)(targetProject, `targetProject must be passed.`);
  let targetProjectRootPath = targetProject.configuration.rootPath;

  if (!_path.default.isAbsolute(testPath)) {
    testPath = _path.default.join(targetProjectRootPath, testPath);
  }
  let jsPathArray = [targetProjectRootPath];
  if (await _fs.promises.lstat(testPath).then(statObject => statObject.isDirectory())) jsPathArray.push(testPath);


  console.log(`• Searching for ${JSON.stringify(testFileExtension)} extension files, in path ${testPath}.`);
  let testFileArray;
  if (testFileExtension.some(extension => testPath.endsWith(extension))) {

    console.log(`• Test path: ${testPath}`);
    testFileArray = [testPath];
  } else {

    testFileArray = (0, _listFileRecursively.listFileWithExtension)({ directory: testPath, extension: testFileExtension });
  }

  let jsFileArrayOfArray = jsPathArray.map(jsPath => {
    return (0, _listFileRecursively.listFileWithExtension)({ directory: jsPath, extension: jsFileExtension });
  });




  let watchFileArray = Array.prototype.concat.apply([], jsFileArrayOfArray);

  let stringifyArgs = JSON.stringify([{ testTarget: testFileArray, jsFileArray: jsFileArrayOfArray, shouldCompileTest, shouldDebugger, targetProject }]);
  let subprocess;
  function runMochaInSubprocess() {

    subprocess = _child_process.default.fork(mochaModule, [stringifyArgs], { stdio: [0, 1, 2, 'ipc'] });

  }
  let triggerCallback = () => {

    subprocess && subprocess.kill('SIGINT');
    runMochaInSubprocess();
  };

  await (0, _nodejsLiveReload.watchFile)({ triggerCallback, fileArray: Array.prototype.concat.apply([], [watchFileArray, testFileArray]), ignoreNodeModules: true, logMessage: false });

  runMochaInSubprocess();
}









function subprocessInspector({ port = 9229, host = 'localhost', shouldbreak = true } = {}) {
  const inspector = require('inspector');
  inspector.open(port, host, shouldbreak);

  process.on('beforeExit', () => {
    setTimeout(() => {}, 1000000000);
  });
  return inspector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,