"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.listFileRecursively = listFileRecursively;exports.listFileWithExtension = listFileWithExtension;var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));


function listFileRecursively({ directory, ignoreRegex = [new RegExp(/node_modules/), new RegExp(/.git/)] }) {
  let results = [];
  let list = _fs.default.readdirSync(directory);
  list.forEach(filename => {
    let filepath = _path.default.join(directory, filename);

    let shouldIgnore = ignoreRegex.some(regex => {
      return filepath.match(regex);
    });
    if (shouldIgnore) return;
    let stat;
    try {
      stat = _fs.default.statSync(filepath);
    } catch (error) {
      return;
    }
    if (stat && stat.isDirectory()) results = results.concat(listFileRecursively({ directory: filepath }));else
    results.push({ name: filename, path: filepath });
  });
  return results;
}


function listFileWithExtension({ directory, extension = [], ignoreRegex = [] }) {
  if (!Array.isArray(extension)) extension = [extension];
  return listFileRecursively({ directory }).
  filter(file => {
    let c1 = extension.some(suffix => file.name.substr(-suffix.length) === suffix);
    let c2 = ignoreRegex.some(regex => file.path.match(regex));
    return c1 && !c2;
  }).
  reduce((accumulator, currentValue) => {
    accumulator.push(currentValue.path);
    return accumulator;
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS91dGlsaXR5L2xpc3RGaWxlUmVjdXJzaXZlbHkuanMiXSwibmFtZXMiOlsibGlzdEZpbGVSZWN1cnNpdmVseSIsImRpcmVjdG9yeSIsImlnbm9yZVJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImxpc3QiLCJmaWxlc3lzdGVtIiwicmVhZGRpclN5bmMiLCJmb3JFYWNoIiwiZmlsZW5hbWUiLCJmaWxlcGF0aCIsInBhdGgiLCJqb2luIiwic2hvdWxkSWdub3JlIiwic29tZSIsInJlZ2V4IiwibWF0Y2giLCJzdGF0Iiwic3RhdFN5bmMiLCJlcnJvciIsImlzRGlyZWN0b3J5IiwiY29uY2F0IiwicHVzaCIsIm5hbWUiLCJsaXN0RmlsZVdpdGhFeHRlbnNpb24iLCJleHRlbnNpb24iLCJBcnJheSIsImlzQXJyYXkiLCJmaWx0ZXIiLCJmaWxlIiwiYzEiLCJzdWZmaXgiLCJzdWJzdHIiLCJsZW5ndGgiLCJjMiIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudFZhbHVlIl0sIm1hcHBpbmdzIjoid1FBQUE7QUFDQTs7O0FBR0EsU0FBU0EsbUJBQVQsQ0FBNkIsRUFBRUMsU0FBRixFQUFhQyxXQUFXLEdBQUcsQ0FBQyxJQUFJQyxNQUFKLENBQVcsY0FBWCxDQUFELEVBQTZCLElBQUlBLE1BQUosQ0FBVyxNQUFYLENBQTdCLENBQTNCLEVBQTdCLEVBQTRHO0FBQzFHLE1BQUlDLE9BQU8sR0FBRyxFQUFkO0FBQ0EsTUFBSUMsSUFBSSxHQUFHQyxZQUFXQyxXQUFYLENBQXVCTixTQUF2QixDQUFYO0FBQ0FJLEVBQUFBLElBQUksQ0FBQ0csT0FBTCxDQUFhQyxRQUFRLElBQUk7QUFDdkIsUUFBSUMsUUFBUSxHQUFHQyxjQUFLQyxJQUFMLENBQVVYLFNBQVYsRUFBcUJRLFFBQXJCLENBQWY7O0FBRUEsUUFBSUksWUFBWSxHQUFHWCxXQUFXLENBQUNZLElBQVosQ0FBaUJDLEtBQUssSUFBSTtBQUMzQyxhQUFPTCxRQUFRLENBQUNNLEtBQVQsQ0FBZUQsS0FBZixDQUFQO0FBQ0QsS0FGa0IsQ0FBbkI7QUFHQSxRQUFJRixZQUFKLEVBQWtCO0FBQ2xCLFFBQUlJLElBQUo7QUFDQSxRQUFJO0FBQ0ZBLE1BQUFBLElBQUksR0FBR1gsWUFBV1ksUUFBWCxDQUFvQlIsUUFBcEIsQ0FBUDtBQUNELEtBRkQsQ0FFRSxPQUFPUyxLQUFQLEVBQWM7QUFDZDtBQUNEO0FBQ0QsUUFBSUYsSUFBSSxJQUFJQSxJQUFJLENBQUNHLFdBQUwsRUFBWixFQUFnQ2hCLE9BQU8sR0FBR0EsT0FBTyxDQUFDaUIsTUFBUixDQUFlckIsbUJBQW1CLENBQUMsRUFBRUMsU0FBUyxFQUFFUyxRQUFiLEVBQUQsQ0FBbEMsQ0FBVixDQUFoQztBQUNLTixJQUFBQSxPQUFPLENBQUNrQixJQUFSLENBQWEsRUFBRUMsSUFBSSxFQUFFZCxRQUFSLEVBQWtCRSxJQUFJLEVBQUVELFFBQXhCLEVBQWI7QUFDTixHQWZEO0FBZ0JBLFNBQU9OLE9BQVA7QUFDRDs7O0FBR0QsU0FBU29CLHFCQUFULENBQStCLEVBQUV2QixTQUFGLEVBQWF3QixTQUFTLEdBQUcsRUFBekIsRUFBNkJ2QixXQUFXLEdBQUcsRUFBM0MsRUFBL0IsRUFBZ0Y7QUFDOUUsTUFBSSxDQUFDd0IsS0FBSyxDQUFDQyxPQUFOLENBQWNGLFNBQWQsQ0FBTCxFQUErQkEsU0FBUyxHQUFHLENBQUNBLFNBQUQsQ0FBWjtBQUMvQixTQUFPekIsbUJBQW1CLENBQUMsRUFBRUMsU0FBRixFQUFELENBQW5CO0FBQ0oyQixFQUFBQSxNQURJLENBQ0dDLElBQUksSUFBSTtBQUNkLFFBQUlDLEVBQUUsR0FBR0wsU0FBUyxDQUFDWCxJQUFWLENBQWVpQixNQUFNLElBQUlGLElBQUksQ0FBQ04sSUFBTCxDQUFVUyxNQUFWLENBQWlCLENBQUNELE1BQU0sQ0FBQ0UsTUFBekIsTUFBcUNGLE1BQTlELENBQVQ7QUFDQSxRQUFJRyxFQUFFLEdBQUdoQyxXQUFXLENBQUNZLElBQVosQ0FBaUJDLEtBQUssSUFBSWMsSUFBSSxDQUFDbEIsSUFBTCxDQUFVSyxLQUFWLENBQWdCRCxLQUFoQixDQUExQixDQUFUO0FBQ0EsV0FBT2UsRUFBRSxJQUFJLENBQUNJLEVBQWQ7QUFDRCxHQUxJO0FBTUpDLEVBQUFBLE1BTkksQ0FNRyxDQUFDQyxXQUFELEVBQWNDLFlBQWQsS0FBK0I7QUFDckNELElBQUFBLFdBQVcsQ0FBQ2QsSUFBWixDQUFpQmUsWUFBWSxDQUFDMUIsSUFBOUI7QUFDQSxXQUFPeUIsV0FBUDtBQUNELEdBVEksRUFTRixFQVRFLENBQVA7QUFVRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmaWxlc3lzdGVtIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxuLy8gcmV0dXJucyBhbGwgZmlsZXMgaW4gbmVzdGVkIGRpcmVjdG9yeS5cbmZ1bmN0aW9uIGxpc3RGaWxlUmVjdXJzaXZlbHkoeyBkaXJlY3RvcnksIGlnbm9yZVJlZ2V4ID0gW25ldyBSZWdFeHAoL25vZGVfbW9kdWxlcy8pLCBuZXcgUmVnRXhwKC8uZ2l0LyldIH0pIHtcbiAgbGV0IHJlc3VsdHMgPSBbXVxuICBsZXQgbGlzdCA9IGZpbGVzeXN0ZW0ucmVhZGRpclN5bmMoZGlyZWN0b3J5KVxuICBsaXN0LmZvckVhY2goZmlsZW5hbWUgPT4ge1xuICAgIGxldCBmaWxlcGF0aCA9IHBhdGguam9pbihkaXJlY3RvcnksIGZpbGVuYW1lKVxuICAgIC8vIGNoZWNrIGlmIHRoZSBwYXRoIHNob3VsZCBiZSBpZ25vcmVkXG4gICAgbGV0IHNob3VsZElnbm9yZSA9IGlnbm9yZVJlZ2V4LnNvbWUocmVnZXggPT4ge1xuICAgICAgcmV0dXJuIGZpbGVwYXRoLm1hdGNoKHJlZ2V4KVxuICAgIH0pXG4gICAgaWYgKHNob3VsZElnbm9yZSkgcmV0dXJuXG4gICAgbGV0IHN0YXRcbiAgICB0cnkge1xuICAgICAgc3RhdCA9IGZpbGVzeXN0ZW0uc3RhdFN5bmMoZmlsZXBhdGgpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiAvLyBza2lwIGl0ZXJhdGlvbiBvbiBmYWlsZWQgc2VhY2hlcy5cbiAgICB9XG4gICAgaWYgKHN0YXQgJiYgc3RhdC5pc0RpcmVjdG9yeSgpKSByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQobGlzdEZpbGVSZWN1cnNpdmVseSh7IGRpcmVjdG9yeTogZmlsZXBhdGggfSkpXG4gICAgZWxzZSByZXN1bHRzLnB1c2goeyBuYW1lOiBmaWxlbmFtZSwgcGF0aDogZmlsZXBhdGggfSkgLy8gY3JlYXRlIG9iamVjdFxuICB9KVxuICByZXR1cm4gcmVzdWx0c1xufVxuXG4vLyBpbnRlcmZhY2UgZm9yIGxpc3RGaWVSZWN1c2l2ZWx5IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZiBmaWxlIHBhdGhzLCBhbmQgZmlsdGVycyBmaWxlcyB3aXRoIHRoZSBzcGVjaWZpZWQgZXh0ZW5zaW9uLlxuZnVuY3Rpb24gbGlzdEZpbGVXaXRoRXh0ZW5zaW9uKHsgZGlyZWN0b3J5LCBleHRlbnNpb24gPSBbXSwgaWdub3JlUmVnZXggPSBbXSB9KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHRlbnNpb24pKSBleHRlbnNpb24gPSBbZXh0ZW5zaW9uXSAvLyBzdXBwb3J0IGFycmF5IG9yIHN0cmluZ1xuICByZXR1cm4gbGlzdEZpbGVSZWN1cnNpdmVseSh7IGRpcmVjdG9yeSB9KVxuICAgIC5maWx0ZXIoZmlsZSA9PiB7XG4gICAgICBsZXQgYzEgPSBleHRlbnNpb24uc29tZShzdWZmaXggPT4gZmlsZS5uYW1lLnN1YnN0cigtc3VmZml4Lmxlbmd0aCkgPT09IHN1ZmZpeCkgLy8gT25seSBrZWVwIHRoZSBmaWxlcyB3aXRoIHRoZSBleHRlbnNpb25cbiAgICAgIGxldCBjMiA9IGlnbm9yZVJlZ2V4LnNvbWUocmVnZXggPT4gZmlsZS5wYXRoLm1hdGNoKHJlZ2V4KSkgLy8gZmlsdGVyIGZpbGVzIG1hdGNoaW5nIGlnbm9yZSByZWdleFxuICAgICAgcmV0dXJuIGMxICYmICFjMlxuICAgIH0pXG4gICAgLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgYWNjdW11bGF0b3IucHVzaChjdXJyZW50VmFsdWUucGF0aClcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvclxuICAgIH0sIFtdKVxufVxuXG5leHBvcnQgeyBsaXN0RmlsZVJlY3Vyc2l2ZWx5LCBsaXN0RmlsZVdpdGhFeHRlbnNpb24gfVxuIl19